name: Build SmartCache Enterprise - All Platforms + Android APK

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-executables:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20.x]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-dev sqlite3 libsqlite3-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sqlite3 python@3.11
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install python sqlite
        
    - name: Install dependencies
      run: npm install
      
    - name: Build executables
      run: |
        npm run build
        
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: smartcache-linux
        path: dist/smartcache-linux*
        
    - name: Upload Windows artifacts  
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: smartcache-windows
        path: dist/smartcache-windows.exe
        
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: smartcache-macos
        path: dist/smartcache-macos*

  build-android-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Android tools
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653"
        
    - name: Install system dependencies for native compilation
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-dev sqlite3 libsqlite3-dev
        
    - name: Create Android project structure
      run: |
        mkdir -p android/app/src/main/assets/nodejs-project
        mkdir -p android/app/src/main/java/com/smartcache
        mkdir -p android/app/src/main/res/values
        
    - name: Install dependencies with native compilation
      run: |
        npm install
        npm rebuild
        
    - name: Copy Node.js project to Android assets
      run: |
        cp -r src android/app/src/main/assets/nodejs-project/
        cp -r node_modules android/app/src/main/assets/nodejs-project/
        cp package.json android/app/src/main/assets/nodejs-project/
        cp .env.example android/app/src/main/assets/nodejs-project/
        
    - name: Generate Android manifest
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.smartcache.enterprise">
            
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
            
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="SmartCache Enterprise"
                android:theme="@style/AppTheme"
                android:usesCleartextTraffic="true">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                
                <service
                    android:name=".SmartCacheService"
                    android:enabled="true"
                    android:exported="false"
                    android:foregroundServiceType="dataSync" />
                    
            </application>
        </manifest>
        EOF
        
    - name: Create Android MainActivity
      run: |
        cat > android/app/src/main/java/com/smartcache/MainActivity.java << 'EOF'
        package com.smartcache.enterprise;
        
        import android.app.Activity;
        import android.content.Intent;
        import android.net.Uri;
        import android.os.Bundle;
        import android.webkit.WebView;
        import android.webkit.WebViewClient;
        import android.widget.Toast;
        
        public class MainActivity extends Activity {
            private WebView webView;
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                // Start SmartCache service
                Intent serviceIntent = new Intent(this, SmartCacheService.class);
                startForegroundService(serviceIntent);
                
                // Setup WebView for dashboard
                webView = new WebView(this);
                webView.getSettings().setJavaScriptEnabled(true);
                webView.getSettings().setDomStorageEnabled(true);
                webView.setWebViewClient(new WebViewClient());
                
                setContentView(webView);
                
                // Load SmartCache dashboard
                webView.loadUrl("http://localhost:3000");
                
                Toast.makeText(this, "SmartCache Enterprise Started", Toast.LENGTH_LONG).show();
            }
        }
        EOF
        
    - name: Create SmartCache Android Service
      run: |
        cat > android/app/src/main/java/com/smartcache/SmartCacheService.java << 'EOF'
        package com.smartcache.enterprise;
        
        import android.app.Notification;
        import android.app.NotificationChannel;
        import android.app.NotificationManager;
        import android.app.Service;
        import android.content.Intent;
        import android.os.Build;
        import android.os.IBinder;
        import java.io.*;
        import java.util.concurrent.ExecutorService;
        import java.util.concurrent.Executors;
        
        public class SmartCacheService extends Service {
            private static final String CHANNEL_ID = "SmartCacheChannel";
            private static final int NOTIFICATION_ID = 1;
            private ExecutorService executor;
            private Process nodeProcess;
            
            @Override
            public void onCreate() {
                super.onCreate();
                createNotificationChannel();
                executor = Executors.newSingleThreadExecutor();
            }
            
            @Override
            public int onStartCommand(Intent intent, int flags, int startId) {
                startForeground(NOTIFICATION_ID, createNotification());
                
                executor.execute(() -> {
                    try {
                        // Extract Node.js project from assets
                        extractNodeProject();
                        
                        // Start Node.js SmartCache
                        startNodeProcess();
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });
                
                return START_STICKY;
            }
            
            private void extractNodeProject() throws IOException {
                // Implementation to extract Node.js project from assets to internal storage
                File projectDir = new File(getFilesDir(), "nodejs-project");
                if (!projectDir.exists()) {
                    projectDir.mkdirs();
                    // Copy assets to internal storage
                }
            }
            
            private void startNodeProcess() throws IOException {
                File nodeExecutable = new File(getFilesDir(), "nodejs-project/node");
                File smartcacheScript = new File(getFilesDir(), "nodejs-project/src/smartcache.js");
                
                ProcessBuilder pb = new ProcessBuilder(nodeExecutable.getAbsolutePath(), smartcacheScript.getAbsolutePath());
                pb.directory(new File(getFilesDir(), "nodejs-project"));
                
                nodeProcess = pb.start();
            }
            
            private Notification createNotification() {
                return new Notification.Builder(this, CHANNEL_ID)
                    .setContentTitle("SmartCache Enterprise")
                    .setContentText("AI Response Caching Active")
                    .setSmallIcon(R.mipmap.ic_launcher)
                    .build();
            }
            
            private void createNotificationChannel() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    NotificationChannel channel = new NotificationChannel(
                        CHANNEL_ID,
                        "SmartCache Service",
                        NotificationManager.IMPORTANCE_LOW
                    );
                    NotificationManager manager = getSystemService(NotificationManager.class);
                    manager.createNotificationChannel(channel);
                }
            }
            
            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }
            
            @Override
            public void onDestroy() {
                super.onDestroy();
                if (nodeProcess != null) {
                    nodeProcess.destroy();
                }
                if (executor != null) {
                    executor.shutdown();
                }
            }
        }
        EOF
        
    - name: Create build.gradle
      run: |
        cat > android/build.gradle << 'EOF'
        plugins {
            id 'com.android.application' version '8.1.0' apply false
        }
        EOF
        
        cat > android/app/build.gradle << 'EOF'
        plugins {
            id 'com.android.application'
        }
        
        android {
            namespace 'com.smartcache.enterprise'
            compileSdk 34
            
            defaultConfig {
                applicationId "com.smartcache.enterprise"
                minSdk 24
                targetSdk 34
                versionCode 1
                versionName "1.0"
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
        
        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
        }
        EOF
        
    - name: Create gradle wrapper
      run: |
        cd android
        gradle wrapper --gradle-version 8.3
        
    - name: Build Android APK
      run: |
        cd android
        ./gradlew assembleRelease
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: smartcache-android-apk
        path: android/app/build/outputs/apk/release/*.apk

  create-release:
    needs: [build-executables, build-android-apk]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release assets
      run: |
        mkdir release-assets
        
        # Copy executables
        cp smartcache-linux/* release-assets/ || true
        cp smartcache-windows/* release-assets/ || true  
        cp smartcache-macos/* release-assets/ || true
        cp smartcache-android-apk/* release-assets/ || true
        
        # Create release info
        echo "SmartCache Enterprise - Universal AI Caching System" > release-assets/README.txt
        echo "Built on $(date)" >> release-assets/README.txt
        echo "Commit: $GITHUB_SHA" >> release-assets/README.txt
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'
      with:
        files: release-assets/*
        body: |
          ## SmartCache Enterprise - Complete Build
          
          ### 🚀 What's New
          - Universal AI API interception (OpenAI, Anthropic, Google, etc.)
          - Federated caching system with Supabase sync
          - Enterprise deployment tools
          - Real-time dashboard and analytics
          
          ### 📦 Downloads
          - **Windows**: `smartcache-windows.exe`
          - **Linux**: `smartcache-linux`
          - **macOS**: `smartcache-macos`  
          - **Android APK**: `smartcache-enterprise.apk`
          
          ### 🔧 Installation
          1. Download the appropriate version for your platform
          2. Copy `.env.example` to `.env` and configure Supabase credentials
          3. Run the executable or install APK
          4. Access dashboard at http://localhost:3000
          
          Built automatically with GitHub Actions ✨
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload to latest release (main branch)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "latest"
        name: "Latest Development Build"
        files: release-assets/*
        prerelease: true
        body: |
          ## Latest Development Build
          
          This is an automated build from the main branch.
          Contains the latest features and improvements.
          
          **⚠️ Development Build**: May contain unstable features.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}