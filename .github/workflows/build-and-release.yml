name: Build SmartCache Enterprise - All Platforms + Android APK

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-executables:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20.x]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-dev sqlite3 libsqlite3-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sqlite3 python@3.11
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install python sqlite
        
    - name: Install dependencies
      run: npm install
      
    - name: Build executables
      run: |
        npm run build
        
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: smartcache-linux
        path: dist/smartcache-linux*
        
    - name: Upload Windows artifacts  
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: smartcache-windows
        path: dist/smartcache-windows.exe
        
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: smartcache-macos
        path: dist/smartcache-macos*

  build-android-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Android tools
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653"
        
    - name: Install system dependencies for native compilation
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-dev sqlite3 libsqlite3-dev
        
    - name: Create Android project structure
      run: |
        mkdir -p android/app/src/main/assets/nodejs-project
        mkdir -p android/app/src/main/java/com/smartcache
        mkdir -p android/app/src/main/res/values
        
    - name: Install dependencies with native compilation
      run: |
        npm install
        npm rebuild
        
    - name: Download Node.js for Android and copy project
      run: |
        # Download Node.js binary for Android ARM64
        mkdir -p android/app/src/main/assets/nodejs-project/bin
        wget https://nodejs.org/dist/v20.18.0/node-v20.18.0-linux-arm64.tar.gz
        tar -xzf node-v20.18.0-linux-arm64.tar.gz
        cp node-v20.18.0-linux-arm64/bin/node android/app/src/main/assets/nodejs-project/bin/
        chmod +x android/app/src/main/assets/nodejs-project/bin/node
        
        # Copy Node.js project files
        cp -r src android/app/src/main/assets/nodejs-project/
        cp -r node_modules android/app/src/main/assets/nodejs-project/
        cp package.json android/app/src/main/assets/nodejs-project/
        cp .env.example android/app/src/main/assets/nodejs-project/
        
        # Create startup script
        cat > android/app/src/main/assets/nodejs-project/start.sh << 'EOF'
        #!/system/bin/sh
        export NODE_PATH="./node_modules"
        export HOME="."
        ./bin/node src/smartcache.js
        EOF
        chmod +x android/app/src/main/assets/nodejs-project/start.sh
        
    - name: Generate Android manifest
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.smartcache.enterprise">
            
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
            
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="SmartCache Enterprise"
                android:theme="@style/AppTheme"
                android:usesCleartextTraffic="true">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                
                <service
                    android:name=".SmartCacheService"
                    android:enabled="true"
                    android:exported="false"
                    android:foregroundServiceType="dataSync" />
                    
            </application>
        </manifest>
        EOF
        
    - name: Create Android MainActivity
      run: |
        cat > android/app/src/main/java/com/smartcache/MainActivity.java << 'EOF'
        package com.smartcache.enterprise;
        
        import android.app.Activity;
        import android.content.Intent;
        import android.net.Uri;
        import android.os.Bundle;
        import android.webkit.WebView;
        import android.webkit.WebViewClient;
        import android.widget.Toast;
        
        public class MainActivity extends Activity {
            private WebView webView;
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                // Start SmartCache service
                Intent serviceIntent = new Intent(this, SmartCacheService.class);
                startForegroundService(serviceIntent);
                
                // Setup WebView for dashboard
                webView = new WebView(this);
                webView.getSettings().setJavaScriptEnabled(true);
                webView.getSettings().setDomStorageEnabled(true);
                webView.setWebViewClient(new WebViewClient());
                
                setContentView(webView);
                
                // Load SmartCache dashboard
                webView.loadUrl("http://localhost:3000");
                
                Toast.makeText(this, "SmartCache Enterprise Started", Toast.LENGTH_LONG).show();
            }
        }
        EOF
        
    - name: Create SmartCache Android Service
      run: |
        cat > android/app/src/main/java/com/smartcache/SmartCacheService.java << 'EOF'
        package com.smartcache.enterprise;
        
        import android.app.Notification;
        import android.app.NotificationChannel;
        import android.app.NotificationManager;
        import android.app.Service;
        import android.content.Intent;
        import android.content.res.AssetManager;
        import android.os.Build;
        import android.os.IBinder;
        import android.util.Log;
        import java.io.*;
        import java.util.concurrent.ExecutorService;
        import java.util.concurrent.Executors;
        
        public class SmartCacheService extends Service {
            private static final String TAG = "SmartCacheService";
            private static final String CHANNEL_ID = "SmartCacheChannel";
            private static final int NOTIFICATION_ID = 1;
            private ExecutorService executor;
            private Process nodeProcess;
            
            @Override
            public void onCreate() {
                super.onCreate();
                createNotificationChannel();
                executor = Executors.newSingleThreadExecutor();
            }
            
            @Override
            public int onStartCommand(Intent intent, int flags, int startId) {
                startForeground(NOTIFICATION_ID, createNotification());
                
                executor.execute(() -> {
                    try {
                        // Extract Node.js project from assets
                        extractNodeProject();
                        
                        // Start Node.js SmartCache
                        startNodeProcess();
                        
                    } catch (Exception e) {
                        Log.e(TAG, "Failed to start SmartCache", e);
                    }
                });
                
                return START_STICKY;
            }
            
            private void extractNodeProject() throws IOException {
                File projectDir = new File(getFilesDir(), "nodejs-project");
                if (projectDir.exists()) {
                    Log.i(TAG, "Node.js project already extracted");
                    return;
                }
                
                Log.i(TAG, "Extracting Node.js project from assets...");
                copyAssets("nodejs-project", projectDir);
                
                // Set executable permissions for Node.js binary
                File nodeExecutable = new File(projectDir, "bin/node");
                if (nodeExecutable.exists()) {
                    nodeExecutable.setExecutable(true, false);
                    Log.i(TAG, "Node.js executable permissions set");
                }
                
                // Set executable permissions for start script
                File startScript = new File(projectDir, "start.sh");
                if (startScript.exists()) {
                    startScript.setExecutable(true, false);
                    Log.i(TAG, "Start script permissions set");
                }
            }
            
            private void copyAssets(String assetPath, File targetDir) throws IOException {
                AssetManager assetManager = getAssets();
                String[] files = assetManager.list(assetPath);
                
                if (!targetDir.exists()) {
                    targetDir.mkdirs();
                }
                
                if (files != null && files.length > 0) {
                    // It's a directory
                    for (String file : files) {
                        copyAssets(assetPath + "/" + file, new File(targetDir, file));
                    }
                } else {
                    // It's a file
                    try (InputStream in = assetManager.open(assetPath);
                         FileOutputStream out = new FileOutputStream(targetDir)) {
                        byte[] buffer = new byte[1024];
                        int read;
                        while ((read = in.read(buffer)) != -1) {
                            out.write(buffer, 0, read);
                        }
                    }
                }
            }
            
            private void startNodeProcess() throws IOException {
                File projectDir = new File(getFilesDir(), "nodejs-project");
                File nodeExecutable = new File(projectDir, "bin/node");
                File smartcacheScript = new File(projectDir, "src/smartcache.js");
                
                if (!nodeExecutable.exists()) {
                    Log.e(TAG, "Node.js executable not found: " + nodeExecutable.getAbsolutePath());
                    return;
                }
                
                if (!smartcacheScript.exists()) {
                    Log.e(TAG, "SmartCache script not found: " + smartcacheScript.getAbsolutePath());
                    return;
                }
                
                Log.i(TAG, "Starting Node.js process...");
                
                ProcessBuilder pb = new ProcessBuilder(
                    nodeExecutable.getAbsolutePath(),
                    smartcacheScript.getAbsolutePath()
                );
                pb.directory(projectDir);
                pb.environment().put("NODE_PATH", new File(projectDir, "node_modules").getAbsolutePath());
                pb.environment().put("HOME", projectDir.getAbsolutePath());
                
                nodeProcess = pb.start();
                
                // Log Node.js output for debugging
                new Thread(() -> {
                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(nodeProcess.getInputStream()))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            Log.i(TAG, "Node.js: " + line);
                        }
                    } catch (IOException e) {
                        Log.e(TAG, "Error reading Node.js output", e);
                    }
                }).start();
                
                Log.i(TAG, "SmartCache Node.js process started");
            }
            
            private Notification createNotification() {
                return new Notification.Builder(this, CHANNEL_ID)
                    .setContentTitle("SmartCache Enterprise")
                    .setContentText("AI Response Caching Active")
                    .setSmallIcon(R.mipmap.ic_launcher)
                    .build();
            }
            
            private void createNotificationChannel() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    NotificationChannel channel = new NotificationChannel(
                        CHANNEL_ID,
                        "SmartCache Service",
                        NotificationManager.IMPORTANCE_LOW
                    );
                    NotificationManager manager = getSystemService(NotificationManager.class);
                    manager.createNotificationChannel(channel);
                }
            }
            
            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }
            
            @Override
            public void onDestroy() {
                super.onDestroy();
                if (nodeProcess != null) {
                    nodeProcess.destroy();
                }
                if (executor != null) {
                    executor.shutdown();
                }
            }
        }
        EOF
        
    - name: Create build.gradle and settings.gradle
      run: |
        # Create settings.gradle with centralized repository management
        cat > android/settings.gradle << 'EOF'
        pluginManagement {
            repositories {
                gradlePluginPortal()
                google()
                mavenCentral()
            }
            plugins {
                id 'com.android.application' version '8.2.2'
                id 'com.android.library' version '8.2.2'
            }
        }
        
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
            repositories {
                google() {
                    mavenContent {
                        includeGroupByRegex("com\\.android.*")
                        includeGroupByRegex("com\\.google.*")
                        includeGroupByRegex("androidx.*")
                    }
                }
                mavenCentral()
                maven { 
                    url 'https://jitpack.io' 
                    content {
                        includeGroupByRegex("com\\.github.*")
                    }
                }
            }
        }
        
        rootProject.name = "SmartCacheEnterprise"
        include ':app'
        EOF
        
        # Create minimal root build.gradle (repositories managed by settings.gradle)
        cat > android/build.gradle << 'EOF'
        // Root build.gradle - repositories managed by settings.gradle
        
        buildscript {
            ext {
                compileSdkVersion = 34
                targetSdkVersion = 34
                minSdkVersion = 24
                buildToolsVersion = "34.0.0"
                androidGradleVersion = "8.2.2"
                
                // Dependency versions
                appCompatVersion = "1.6.1"
                coreVersion = "1.12.0"
                webkitVersion = "1.8.0"
            }
        }
        
        plugins {
            id 'com.android.application' version '8.2.2' apply false
        }
        
        // Global configuration
        subprojects {
            afterEvaluate { project ->
                if (project.hasProperty('android')) {
                    android {
                        compileSdkVersion rootProject.ext.compileSdkVersion
                        buildToolsVersion rootProject.ext.buildToolsVersion
                        
                        compileOptions {
                            sourceCompatibility JavaVersion.VERSION_11
                            targetCompatibility JavaVersion.VERSION_11
                        }
                        
                        packagingOptions {
                            pickFirst '**/libc++_shared.so'
                            pickFirst '**/libjsc.so'
                            pickFirst '**/libnode.so'
                            exclude 'META-INF/DEPENDENCIES'
                            exclude 'META-INF/LICENSE'
                            exclude 'META-INF/LICENSE.txt'
                            exclude 'META-INF/NOTICE'
                            exclude 'META-INF/NOTICE.txt'
                        }
                    }
                }
            }
        }
        
        tasks.register('clean', Delete) {
            delete rootProject.buildDir
        }
        EOF
        
        cat > android/app/build.gradle << 'EOF'
        plugins {
            id 'com.android.application'
        }
        
        android {
            namespace 'com.smartcache.enterprise'
            compileSdk rootProject.ext.compileSdkVersion
            buildToolsVersion rootProject.ext.buildToolsVersion
            
            defaultConfig {
                applicationId "com.smartcache.enterprise"
                minSdk rootProject.ext.minSdkVersion
                targetSdk rootProject.ext.targetSdkVersion
                versionCode getVersionCodeFromGit()
                versionName getVersionNameFromGit()
                
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                vectorDrawables.useSupportLibrary = true
                
                ndk {
                    abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
                }
                
                multiDexEnabled true
            }
            
            signingConfigs {
                debug {
                    storeFile file("debug.keystore")
                    storePassword "android"
                    keyAlias "androiddebugkey"
                    keyPassword "android"
                }
            }
            
            buildTypes {
                debug {
                    applicationIdSuffix ".debug"
                    debuggable true
                    minifyEnabled false
                    signingConfig signingConfigs.debug
                    manifestPlaceholders = [
                        appName: "@string/app_name_debug"
                    ]
                }
                
                release {
                    minifyEnabled true
                    shrinkResources true
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.debug
                    manifestPlaceholders = [
                        appName: "@string/app_name"
                    ]
                    
                    // Enterprise security
                    buildConfigField "String", "BUILD_TYPE", '"release"'
                    buildConfigField "boolean", "ENABLE_LOGGING", "false"
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_11
                targetCompatibility JavaVersion.VERSION_11
                coreLibraryDesugaringEnabled true
            }
            
            buildFeatures {
                buildConfig true
                viewBinding true
            }
            
            lint {
                abortOnError false
                checkReleaseBuilds false
                disable 'MissingTranslation', 'InvalidPackage'
            }
            
            packagingOptions {
                pickFirst '**/libc++_shared.so'
                pickFirst '**/libjsc.so'
                pickFirst '**/libnode.so'
                pickFirst '**/libsqlite.so'
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/NOTICE.txt'
                exclude 'META-INF/ASL2.0'
                exclude 'META-INF/INDEX.LIST'
                exclude 'META-INF/io.netty.versions.properties'
            }
        }
        
        dependencies {
            // Core Android dependencies
            implementation "androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}"
            implementation "androidx.core:core:${rootProject.ext.coreVersion}"
            implementation "androidx.webkit:webkit:${rootProject.ext.webkitVersion}"
            
            // Additional enterprise dependencies
            implementation 'androidx.lifecycle:lifecycle-service:2.7.0'
            implementation 'androidx.work:work-runtime:2.9.0'
            implementation 'androidx.security:security-crypto:1.1.0-alpha06'
            implementation 'androidx.preference:preference:1.2.1'
            implementation 'com.google.android.material:material:1.11.0'
            
            // Desugaring for API compatibility
            coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
            
            // Testing
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        
        // Version management functions
        def getVersionCodeFromGit() {
            try {
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-list', 'HEAD', '--count'
                    standardOutput = stdout
                }
                return Integer.parseInt(stdout.toString().trim())
            } catch (Exception e) {
                return 1
            }
        }
        
        def getVersionNameFromGit() {
            try {
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'describe', '--tags', '--always'
                    standardOutput = stdout
                }
                return stdout.toString().trim()
            } catch (Exception e) {
                return "1.0.0"
            }
        }
        EOF
        
    - name: Create gradle.properties and resources
      run: |
        # Create gradle.properties
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        org.gradle.parallel=true
        org.gradle.caching=true
        org.gradle.configureondemand=true
        android.useAndroidX=true
        android.enableJetifier=true
        android.defaults.buildfeatures.buildconfig=true
        android.nonTransitiveRClass=false
        android.nonFinalResIds=false
        EOF
        
        # Create app resources
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/res/mipmap-hdpi
        mkdir -p android/app/src/main/res/mipmap-mdpi
        mkdir -p android/app/src/main/res/mipmap-xhdpi
        mkdir -p android/app/src/main/res/mipmap-xxhdpi
        mkdir -p android/app/src/main/res/mipmap-xxxhdpi
        
        # Create strings.xml
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">SmartCache Enterprise</string>
            <string name="app_name_debug">SmartCache Debug</string>
            <string name="service_name">SmartCache AI Service</string>
            <string name="service_description">Enterprise AI response caching and optimization</string>
            <string name="notification_title">SmartCache Active</string>
            <string name="notification_text">AI response caching is running</string>
            <string name="dashboard_loading">Loading SmartCache Dashboard...</string>
            <string name="error_node_not_found">Node.js runtime not found</string>
            <string name="error_service_failed">Failed to start SmartCache service</string>
        </resources>
        EOF
        
        # Create styles.xml
        cat > android/app/src/main/res/values/styles.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
                <item name="colorPrimary">#4CAF50</item>
                <item name="colorPrimaryDark">#388E3C</item>
                <item name="colorAccent">#FF5722</item>
            </style>
        </resources>
        EOF
        
        # Create app icons using ImageMagick
        sudo apt-get install -y imagemagick
        
        # Create base icon
        convert -size 512x512 xc:"#4CAF50" -fill white -gravity center \
                -font Liberation-Sans-Bold -pointsize 72 -annotate +0+0 "SC" \
                android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
        
        # Generate different sizes
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png -resize 192x192 android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png -resize 144x144 android/app/src/main/res/mipmap-xhdpi/ic_launcher.png
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png -resize 96x96 android/app/src/main/res/mipmap-hdpi/ic_launcher.png
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png -resize 48x48 android/app/src/main/res/mipmap-mdpi/ic_launcher.png
        
    - name: Create debug keystore and ProGuard rules
      run: |
        # Create debug keystore
        keytool -genkeypair -alias androiddebugkey -keypass android -keystore android/app/debug.keystore \
                -storepass android -dname "CN=Android Debug,O=Android,C=US" -keyalg RSA -keysize 2048 \
                -validity 10000 -deststoretype pkcs12
        
        # Create ProGuard rules
        cat > android/app/proguard-rules.pro << 'EOF'
        # SmartCache Enterprise ProGuard Rules
        
        # Keep Node.js related classes
        -keep class com.smartcache.enterprise.** { *; }
        
        # Keep WebView related classes
        -keep class android.webkit.** { *; }
        -keepclassmembers class * extends android.webkit.WebViewClient {
            public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
            public boolean *(android.webkit.WebView, java.lang.String);
        }
        
        # Keep Service classes
        -keep public class * extends android.app.Service
        -keep public class * extends android.content.BroadcastReceiver
        -keep public class * extends android.content.ContentProvider
        
        # Keep Notification classes
        -keep class androidx.core.app.NotificationCompat** { *; }
        
        # SQLite and Node.js native libraries
        -keep class org.sqlite.** { *; }
        -keep class org.nodejs.** { *; }
        
        # Preserve line numbers for debugging
        -keepattributes SourceFile,LineNumberTable
        -renamesourcefileattribute SourceFile
        
        # Remove logging in release builds
        -assumenosideeffects class android.util.Log {
            public static boolean isLoggable(java.lang.String, int);
            public static int v(...);
            public static int i(...);
            public static int w(...);
            public static int d(...);
            public static int e(...);
        }
        EOF
        
    - name: Create gradle wrapper and validate build
      run: |
        cd android
        
        # Install compatible Gradle version
        gradle wrapper --gradle-version 8.5 --distribution-type all
        
        # Validate Gradle configuration
        ./gradlew tasks --quiet
        
        # Check for any configuration issues
        ./gradlew dependencies --configuration implementation --quiet || echo "Dependencies check completed"
        
        # Validate Android configuration
        echo "Validating Android project structure..."
        ls -la app/src/main/
        
        echo "Gradle build configuration:"
        cat gradle/wrapper/gradle-wrapper.properties
        
    - name: Build Android APK with full optimization
      run: |
        cd android
        
        # Clean build for fresh start
        ./gradlew clean
        
        # Build both debug and release variants
        echo "Building debug APK..."
        ./gradlew assembleDebug --stacktrace --info
        
        echo "Building optimized release APK..."
        ./gradlew assembleRelease --stacktrace --info
        
        # Verify APK was created
        echo "Built APKs:"
        find app/build/outputs/apk -name "*.apk" -exec ls -lh {} \;
        
        # Create checksums for verification
        find app/build/outputs/apk -name "*.apk" -exec sha256sum {} \; > apk-checksums.txt
        cat apk-checksums.txt
        
        # Analyze APK content
        echo "APK Analysis:"
        if command -v aapt >/dev/null 2>&1; then
            for apk in app/build/outputs/apk/*/*.apk; do
                echo "=== Analysis for $(basename "$apk") ==="
                aapt dump badging "$apk" | head -20
                echo "APK size: $(du -h "$apk" | cut -f1)"
                echo "=============================="
            done
        fi
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: smartcache-android-enterprise
        path: |
          android/app/build/outputs/apk/**/*.apk
          android/apk-checksums.txt
        retention-days: 30

  create-release:
    needs: [build-executables, build-android-apk]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release assets
      run: |
        mkdir release-assets
        
        # Copy all platform executables
        cp smartcache-linux/* release-assets/ 2>/dev/null || echo "Linux build not available"
        cp smartcache-windows/* release-assets/ 2>/dev/null || echo "Windows build not available"  
        cp smartcache-macos/* release-assets/ 2>/dev/null || echo "macOS build not available"
        cp smartcache-android-enterprise/*.apk release-assets/ 2>/dev/null || echo "Android APK not available"
        cp smartcache-android-enterprise/apk-checksums.txt release-assets/ 2>/dev/null || true
        
        # Create release info
        echo "SmartCache Enterprise - Universal AI Caching System" > release-assets/README.txt
        echo "Built on $(date)" >> release-assets/README.txt
        echo "Commit: $GITHUB_SHA" >> release-assets/README.txt
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'
      with:
        files: release-assets/*
        body: |
          ## SmartCache Enterprise - Complete Build
          
          ### 🚀 What's New
          - Universal AI API interception (OpenAI, Anthropic, Google, Cohere, HuggingFace)
          - Federated caching system with Supabase central sync
          - Enterprise-grade Android APK with embedded Node.js runtime
          - SQLite native compilation for all platforms
          - Real-time dashboard with local + global statistics
          - Multi-level interception (Runtime, System Proxy, Browser Extension)
          - Auto-propagation across enterprise networks
          
          ### 📦 Downloads
          - **Windows Enterprise**: `smartcache-windows.exe` (Native SQLite, AD deployment ready)
          - **Linux Enterprise**: `smartcache-linux` (Native SQLite, SSH deployment ready)
          - **macOS Enterprise**: `smartcache-macos` (Native SQLite, Uniform deployment ready)
          - **Android Enterprise APK**: `app-release.apk` (Node.js embedded, SQLite native)
          - **Android Debug APK**: `app-debug.apk` (Development version with logging)
          - **APK Checksums**: `apk-checksums.txt` (Security verification)
          
          ### 🔧 Installation
          1. Download the appropriate version for your platform
          2. Copy `.env.example` to `.env` and configure Supabase credentials
          3. Run the executable or install APK
          4. Access dashboard at http://localhost:3000
          
          Built automatically with GitHub Actions ✨
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload to latest release (main branch)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "latest"
        name: "Latest Development Build"
        files: release-assets/*
        prerelease: true
        body: |
          ## Latest Development Build
          
          This is an automated build from the main branch.
          Contains the latest features and improvements.
          
          **⚠️ Development Build**: May contain unstable features.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}