name: Build SmartCache Enterprise - All Platforms + Android APK

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-executables:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20.x]
      fail-fast: false
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-dev sqlite3 libsqlite3-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sqlite3 python@3.11
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Use built-in Python and install SQLite via vcpkg
        python --version
        python -m pip install --upgrade pip setuptools wheel
        
        # Install vcpkg for native dependencies
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
        C:\vcpkg\vcpkg.exe integrate install
        C:\vcpkg\vcpkg.exe install sqlite3:x64-windows
        
        # Set environment variables for native compilation
        echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
        echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
        
    - name: Install dependencies
      run: npm install
      
    - name: Build Linux executable
      if: matrix.os == 'ubuntu-latest'
      run: |
        npm install -g pkg
        mkdir -p dist
        pkg . --target node18-linux-x64 --output dist/freeapi-linux-x64
        ls -la dist/
        chmod +x dist/freeapi-linux-x64
        
    - name: Build Windows executable  
      if: matrix.os == 'windows-latest'
      run: |
        npm install -g pkg
        New-Item -ItemType Directory -Force -Path dist
        pkg . --target node18-win-x64 --output dist/freeapi-windows-x64.exe
        Get-ChildItem dist/
      shell: pwsh
        
    - name: Build macOS executable
      if: matrix.os == 'macos-latest' 
      run: |
        npm install -g pkg
        mkdir -p dist
        pkg . --target node18-macos-x64 --output dist/freeapi-macos-x64
        ls -la dist/
        chmod +x dist/freeapi-macos-x64
        
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: freeapi-linux
        path: dist/freeapi-linux-x64
        
    - name: Upload Windows artifacts  
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: freeapi-windows
        path: dist/freeapi-windows-x64.exe
        
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: freeapi-macos
        path: dist/freeapi-macos-x64

  build-android-apk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [debug, standard, master]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 12266719
        accept-android-sdk-licenses: true
        log-accepted-android-sdk-licenses: true
        packages: tools platform-tools platforms;android-34 build-tools;34.0.0 ndk;25.2.9519653
      
    - name: Accept all Android SDK licenses manually
      run: |
        # Create license directory if not exists
        mkdir -p "$ANDROID_HOME/licenses"
        
        # Write all standard license hashes
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "$ANDROID_HOME/licenses/android-sdk-license" 
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$ANDROID_HOME/licenses/android-sdk-license"
        
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_HOME/licenses/android-sdk-preview-license"
        echo "79120722343a6f314e0719f863036c702b0e6b2a" >> "$ANDROID_HOME/licenses/android-sdk-preview-license"
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" >> "$ANDROID_HOME/licenses/android-sdk-preview-license"
        
        echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > "$ANDROID_HOME/licenses/google-gdk-license"
        
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > "$ANDROID_HOME/licenses/intel-android-extra-license"
        
        echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > "$ANDROID_HOME/licenses/android-googletv-license"
        
        echo "154748014a207a6e17b47859b65b04c71bb4c8c0" > "$ANDROID_HOME/licenses/android-studio-license"
        
        echo "859f317696f67ef3d7f30a50a5560e7834b43903" > "$ANDROID_HOME/licenses/android-intel-x86-atom-license"
        
        # List all accepted licenses
        echo "Accepted licenses:"
        ls -la "$ANDROID_HOME/licenses/"
        
        # Verify SDK manager accepts all licenses
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses --verbose
        
    - name: Install system dependencies for native compilation
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3 python3-dev sqlite3 libsqlite3-dev
        
    - name: Create Android project structure
      run: |
        mkdir -p android/app/src/main/assets/nodejs-project
        mkdir -p android/app/src/main/java/com/freeapi
        mkdir -p android/app/src/main/res/values
        
    - name: Install dependencies with native compilation
      run: |
        echo "🔧 Installing FreeApi Enterprise dependencies..."
        npm install --production
        
        # Rebuild native modules for Linux (compatible with Android)
        echo "🔨 Rebuilding native modules..."
        npm rebuild sqlite3 --verbose
        
        # Verify critical dependencies
        echo "✅ Verifying dependencies..."
        node -e "console.log('Express:', require('express').version || 'OK')"
        node -e "console.log('SQLite3:', require('sqlite3').VERSION || 'OK')"
        node -e "console.log('Supabase:', require('@supabase/supabase-js').version || 'OK')"
        
    - name: Download Node.js for Android and prepare full project
      run: |
        echo "📱 Preparing FreeApi Enterprise for Android..."
        
        # Create Android assets structure
        mkdir -p android/app/src/main/assets/nodejs-project/bin
        
        # Download Node.js binary for Android ARM64
        echo "⬇️ Downloading Node.js runtime for Android ARM64..."
        wget -q https://nodejs.org/dist/v20.18.0/node-v20.18.0-linux-arm64.tar.gz
        tar -xzf node-v20.18.0-linux-arm64.tar.gz
        cp node-v20.18.0-linux-arm64/bin/node android/app/src/main/assets/nodejs-project/bin/
        chmod +x android/app/src/main/assets/nodejs-project/bin/node
        
        # Get Node.js binary size for verification
        NODE_SIZE=$(du -sh android/app/src/main/assets/nodejs-project/bin/node | cut -f1)
        echo "📊 Node.js binary size: $NODE_SIZE"
        
        # Copy complete project with ALL dependencies
        echo "📂 Copying project files..."
        cp -r src android/app/src/main/assets/nodejs-project/
        cp package.json android/app/src/main/assets/nodejs-project/
        cp .env.example android/app/src/main/assets/nodejs-project/
        
        # CRITICAL: Copy ALL node_modules (this was missing!)
        echo "📦 Copying node_modules (this makes APK 100MB+)..."
        cp -r node_modules android/app/src/main/assets/nodejs-project/
        
        # Install any additional Android-specific deps
        cd android/app/src/main/assets/nodejs-project
        
        # Create production-ready .env
        echo "🔧 Creating production environment config..."
        cat > .env << 'ENV_EOF'
        # FreeApi Enterprise Configuration - Powered by 420White,LLC
        NODE_ENV=production
        DB_PATH=./freeapi.db
        DASHBOARD_PORT=3000
        WS_PORT=8080
        
        # Supabase Configuration (your real keys)
        SUPABASE_URL=https://grjhpkndqrkewluxazvl.supabase.co
        SUPABASE_ANON_KEY=sb_publishable_UGe_OhPKQDuvP-G3c9ZzgQ_XGF48dkZ
        SUPABASE_FUNCTION_URL=https://grjhpkndqrkewluxazvl.supabase.co/functions/v1/uacx-cache
        
        # Enterprise Features
        ENABLE_LOGGING=true
        CACHE_TTL=3600
        MAX_CACHE_SIZE=1000000
        ENV_EOF
        
        cd ../../../../../..
        
        # Verify what we've copied
        echo "📋 Android APK contents verification:"
        echo "Node.js binary: $(ls -lh android/app/src/main/assets/nodejs-project/bin/node | awk '{print $5}')"
        echo "Source files: $(find android/app/src/main/assets/nodejs-project/src -name '*.js' | wc -l) JS files"
        echo "Dependencies: $(ls android/app/src/main/assets/nodejs-project/node_modules | wc -l) packages"
        echo "Total size: $(du -sh android/app/src/main/assets/nodejs-project | cut -f1)"
        
        # List critical dependencies
        echo "🔍 Critical dependencies present:"
        ls android/app/src/main/assets/nodejs-project/node_modules | grep -E "(express|sqlite3|supabase|ws|axios)" || true
        
        # Create startup script
        cat > android/app/src/main/assets/nodejs-project/start.sh << 'EOF'
        #!/system/bin/sh
        export NODE_PATH="./node_modules"
        export HOME="."
        ./bin/node src/smartcache.js
        EOF
        chmod +x android/app/src/main/assets/nodejs-project/start.sh
        
    - name: Generate Android manifest
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools"
            package="com.freeapi.accelerator">
            
            <!-- Core networking permissions -->
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
            <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
            
            <!-- Service and background operation permissions -->
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE_DATA_SYNC" />
            <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
            <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
            <uses-permission android:name="android.permission.DISABLE_KEYGUARD" />
            
            <!-- File system permissions for Node.js -->
            <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" 
                android:maxSdkVersion="32" />
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" 
                android:maxSdkVersion="32" />
            <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" 
                tools:ignore="ScopedStorage" />
            
            <!-- Android 13+ notification permission -->
            <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
            
            <!-- Auto-start and boot permissions -->
            <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
            <uses-permission android:name="android.permission.QUICKBOOT_POWERON" />
            
            <!-- Hardware features -->
            <uses-feature 
                android:name="android.hardware.wifi" 
                android:required="true" />
            <uses-feature 
                android:name="android.software.leanback" 
                android:required="false" />
            
            <application
                android:allowBackup="true"
                android:dataExtractionRules="@xml/data_extraction_rules"
                android:fullBackupContent="@xml/backup_rules"
                android:icon="@mipmap/ic_launcher"
                android:label="${appName}"
                android:theme="@style/AppTheme"
                android:usesCleartextTraffic="true"
                android:requestLegacyExternalStorage="true"
                android:preserveLegacyExternalStorage="true"
                android:networkSecurityConfig="@xml/network_security_config"
                tools:targetApi="34">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:screenOrientation="portrait"
                    android:launchMode="singleTop"
                    android:theme="@style/SplashTheme">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                    <intent-filter>
                        <action android:name="android.intent.action.VIEW" />
                        <category android:name="android.intent.category.DEFAULT" />
                        <category android:name="android.intent.category.BROWSABLE" />
                        <data android:scheme="smartcache" />
                    </intent-filter>
                </activity>
                
                <activity
                    android:name=".PermissionsActivity"
                    android:exported="false"
                    android:theme="@style/TransparentTheme" />
                
                <service
                    android:name=".SmartCacheService"
                    android:enabled="true"
                    android:exported="false"
                    android:foregroundServiceType="dataSync"
                    android:stopWithTask="false" />
                
                <receiver
                    android:name=".BootReceiver"
                    android:enabled="true"
                    android:exported="true">
                    <intent-filter android:priority="1000">
                        <action android:name="android.intent.action.BOOT_COMPLETED" />
                        <action android:name="android.intent.action.QUICKBOOT_POWERON" />
                        <category android:name="android.intent.category.DEFAULT" />
                    </intent-filter>
                </receiver>
                
                <provider
                    android:name="androidx.core.content.FileProvider"
                    android:authorities="${applicationId}.fileprovider"
                    android:exported="false"
                    android:grantUriPermissions="true">
                    <meta-data
                        android:name="android.support.FILE_PROVIDER_PATHS"
                        android:resource="@xml/file_paths" />
                </provider>
                    
            </application>
        </manifest>
        EOF
        
    - name: Create Android MainActivity with Language Selection
      run: |
        cat > android/app/src/main/java/com/freeapi/MainActivity.java << 'EOF'
        package com.freeapi.accelerator;
        
        import android.Manifest;
        import android.app.Activity;
        import android.app.AlertDialog;
        import android.content.Intent;
        import android.content.SharedPreferences;
        import android.content.pm.PackageManager;
        import android.graphics.Color;
        import android.graphics.Typeface;
        import android.net.Uri;
        import android.os.Build;
        import android.os.Bundle;
        import android.os.Handler;
        import android.provider.Settings;
        import android.view.Gravity;
        import android.view.View;
        import android.webkit.WebChromeClient;
        import android.webkit.WebView;
        import android.webkit.WebViewClient;
        import android.widget.Button;
        import android.widget.ImageView;
        import android.widget.LinearLayout;
        import android.widget.ProgressBar;
        import android.widget.TextView;
        import android.widget.Toast;
        import android.util.Log;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import java.lang.reflect.Field;
        import java.util.ArrayList;
        import java.util.HashMap;
        import java.util.List;
        import java.util.Locale;
        import java.util.Map;
        
        public class MainActivity extends Activity {
            private WebView webView;
            private LinearLayout splashLayout;
            private LinearLayout languageLayout;
            private TextView statusText;
            private ProgressBar progressBar;
            private SharedPreferences prefs;
            private boolean isMasterVersion = false;
            private String selectedLanguage = "it";
            private int retryCount = 0;
            private final int MAX_RETRIES = 10;
            
            private static final int PERMISSIONS_REQUEST_CODE = 1000;
            private static final String[] REQUIRED_PERMISSIONS = {
                Manifest.permission.INTERNET,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.ACCESS_WIFI_STATE,
                Manifest.permission.WAKE_LOCK,
                Manifest.permission.FOREGROUND_SERVICE,
                Manifest.permission.RECEIVE_BOOT_COMPLETED
            };
            
            private Map<String, Map<String, String>> translations = new HashMap<>();
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                prefs = getSharedPreferences("FreeApiPrefs", MODE_PRIVATE);
                selectedLanguage = prefs.getString("language", "it");
                
                initializeTranslations();
                detectVersionType();
                createSplashUI();
                
                if (prefs.contains("language")) {
                    checkAndRequestPermissions();
                } else {
                    showLanguageSelection();
                }
            }
            
            private void initializeTranslations() {
                Map<String, String> italian = new HashMap<>();
                italian.put("welcome", "Benvenuto in FreeApi");
                italian.put("select_language", "Seleziona la tua lingua");
                italian.put("powered_by", "Powered and builded by 420White,LLC");
                italian.put("ai_accelerator", "Acceleratore AI Gratuito");
                italian.put("version_standard", "Versione Standard - Cache Locale + Sync Federato");
                italian.put("version_master", "Versione Master - Accesso Database Mondiale");
                italian.put("loading", "Caricamento in corso...");
                italian.put("connecting", "Connessione al server...");
                italian.put("permissions_required", "Autorizzazioni Necessarie");
                italian.put("grant_permissions", "Concedi Autorizzazioni");
                italian.put("continue", "Continua");
                
                Map<String, String> english = new HashMap<>();
                english.put("welcome", "Welcome to FreeApi");
                english.put("select_language", "Select your language");
                english.put("powered_by", "Powered and builded by 420White,LLC");
                english.put("ai_accelerator", "Free AI Accelerator");
                english.put("version_standard", "Standard Version - Local Cache + Federated Sync");
                english.put("version_master", "Master Version - Worldwide Database Access");
                english.put("loading", "Loading...");
                english.put("connecting", "Connecting to server...");
                english.put("permissions_required", "Permissions Required");
                english.put("grant_permissions", "Grant Permissions");
                english.put("continue", "Continue");
                
                Map<String, String> spanish = new HashMap<>();
                spanish.put("welcome", "Bienvenido a FreeApi");
                spanish.put("select_language", "Selecciona tu idioma");
                spanish.put("powered_by", "Powered and builded by 420White,LLC");
                spanish.put("ai_accelerator", "Acelerador AI Gratuito");
                spanish.put("version_standard", "Versión Estándar - Caché Local + Sync Federado");
                spanish.put("version_master", "Versión Master - Acceso Base de Datos Mundial");
                spanish.put("loading", "Cargando...");
                spanish.put("connecting", "Conectando al servidor...");
                spanish.put("permissions_required", "Permisos Requeridos");
                spanish.put("grant_permissions", "Conceder Permisos");
                spanish.put("continue", "Continuar");
                
                Map<String, String> french = new HashMap<>();
                french.put("welcome", "Bienvenue dans FreeApi");
                french.put("select_language", "Sélectionnez votre langue");
                french.put("powered_by", "Powered and builded by 420White,LLC");
                french.put("ai_accelerator", "Accélérateur AI Gratuit");
                french.put("version_standard", "Version Standard - Cache Local + Sync Fédéré");
                french.put("version_master", "Version Master - Accès Base de Données Mondiale");
                french.put("loading", "Chargement...");
                french.put("connecting", "Connexion au serveur...");
                french.put("permissions_required", "Autorisations Requises");
                french.put("grant_permissions", "Accorder les Autorisations");
                french.put("continue", "Continuer");
                
                Map<String, String> german = new HashMap<>();
                german.put("welcome", "Willkommen bei FreeApi");
                german.put("select_language", "Wählen Sie Ihre Sprache");
                german.put("powered_by", "Powered and builded by 420White,LLC");
                german.put("ai_accelerator", "Kostenloser AI-Beschleuniger");
                german.put("version_standard", "Standard Version - Lokaler Cache + Föderierte Sync");
                german.put("version_master", "Master Version - Weltweiter Datenbankzugriff");
                german.put("loading", "Laden...");
                german.put("connecting", "Verbindung zum Server...");
                german.put("permissions_required", "Berechtigungen Erforderlich");
                german.put("grant_permissions", "Berechtigungen Erteilen");
                german.put("continue", "Fortfahren");
                
                translations.put("it", italian);
                translations.put("en", english);
                translations.put("es", spanish);
                translations.put("fr", french);
                translations.put("de", german);
            }
            
            private String getText(String key) {
                Map<String, String> lang = translations.get(selectedLanguage);
                return lang != null ? lang.get(key) : translations.get("en").get(key);
            }
            
            private void detectVersionType() {
                try {
                    Class<?> buildConfigClass = Class.forName(getPackageName() + ".BuildConfig");
                    Field isMasterField = buildConfigClass.getField("IS_MASTER");
                    isMasterVersion = (Boolean) isMasterField.get(null);
                    Log.i("MainActivity", "Version detected: " + (isMasterVersion ? "MASTER" : "STANDARD"));
                } catch (Exception e) {
                    Log.w("MainActivity", "Could not detect version type, defaulting to STANDARD", e);
                    isMasterVersion = false;
                }
            }
            
            private void createSplashUI() {
                LinearLayout mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setGravity(Gravity.CENTER);
                mainLayout.setBackgroundColor(Color.parseColor("#FF6B35"));
                mainLayout.setPadding(50, 50, 50, 50);
                
                // Logo placeholder
                ImageView logo = new ImageView(this);
                logo.setLayoutParams(new LinearLayout.LayoutParams(200, 200));
                logo.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
                mainLayout.addView(logo);
                
                // Title
                TextView title = new TextView(this);
                title.setText("FreeApi");
                title.setTextSize(32);
                title.setTextColor(Color.WHITE);
                title.setTypeface(null, Typeface.BOLD);
                title.setGravity(Gravity.CENTER);
                LinearLayout.LayoutParams titleParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                titleParams.setMargins(0, 30, 0, 10);
                title.setLayoutParams(titleParams);
                mainLayout.addView(title);
                
                // Subtitle
                TextView subtitle = new TextView(this);
                subtitle.setText(getText("ai_accelerator"));
                subtitle.setTextSize(16);
                subtitle.setTextColor(Color.WHITE);
                subtitle.setGravity(Gravity.CENTER);
                mainLayout.addView(subtitle);
                
                // Version info
                TextView versionInfo = new TextView(this);
                versionInfo.setText(isMasterVersion ? getText("version_master") : getText("version_standard"));
                versionInfo.setTextSize(14);
                versionInfo.setTextColor(Color.parseColor("#FFE4B5"));
                versionInfo.setGravity(Gravity.CENTER);
                LinearLayout.LayoutParams versionParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                versionParams.setMargins(0, 10, 0, 30);
                versionInfo.setLayoutParams(versionParams);
                mainLayout.addView(versionInfo);
                
                // Status text
                statusText = new TextView(this);
                statusText.setText(getText("loading"));
                statusText.setTextSize(16);
                statusText.setTextColor(Color.WHITE);
                statusText.setGravity(Gravity.CENTER);
                LinearLayout.LayoutParams statusParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                statusParams.setMargins(0, 20, 0, 20);
                statusText.setLayoutParams(statusParams);
                mainLayout.addView(statusText);
                
                // Progress bar
                progressBar = new ProgressBar(this);
                progressBar.setIndeterminate(true);
                mainLayout.addView(progressBar);
                
                // Powered by
                TextView poweredBy = new TextView(this);
                poweredBy.setText(getText("powered_by"));
                poweredBy.setTextSize(12);
                poweredBy.setTextColor(Color.parseColor("#FFE4B5"));
                poweredBy.setGravity(Gravity.CENTER);
                LinearLayout.LayoutParams poweredParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                poweredParams.setMargins(0, 50, 0, 0);
                poweredBy.setLayoutParams(poweredParams);
                mainLayout.addView(poweredBy);
                
                splashLayout = mainLayout;
                setContentView(splashLayout);
            }
            
            private void showLanguageSelection() {
                LinearLayout langLayout = new LinearLayout(this);
                langLayout.setOrientation(LinearLayout.VERTICAL);
                langLayout.setGravity(Gravity.CENTER);
                langLayout.setBackgroundColor(Color.parseColor("#FF6B35"));
                langLayout.setPadding(50, 50, 50, 50);
                
                TextView selectLang = new TextView(this);
                selectLang.setText("Select Language / Seleziona Lingua");
                selectLang.setTextSize(18);
                selectLang.setTextColor(Color.WHITE);
                selectLang.setTypeface(null, Typeface.BOLD);
                selectLang.setGravity(Gravity.CENTER);
                LinearLayout.LayoutParams selectParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                selectParams.setMargins(0, 0, 0, 30);
                selectLang.setLayoutParams(selectParams);
                langLayout.addView(selectLang);
                
                String[][] languages = {
                    {"it", "🇮🇹 Italiano"},
                    {"en", "🇬🇧 English"},
                    {"es", "🇪🇸 Español"},
                    {"fr", "🇫🇷 Français"},
                    {"de", "🇩🇪 Deutsch"}
                };
                
                for (String[] lang : languages) {
                    Button langButton = new Button(this);
                    langButton.setText(lang[1]);
                    langButton.setTextSize(16);
                    langButton.setBackgroundColor(Color.parseColor("#E85A2B"));
                    langButton.setTextColor(Color.WHITE);
                    LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                    buttonParams.setMargins(0, 10, 0, 10);
                    langButton.setLayoutParams(buttonParams);
                    
                    langButton.setOnClickListener(v -> {
                        selectedLanguage = lang[0];
                        prefs.edit().putString("language", selectedLanguage).apply();
                        recreate();
                    });
                    
                    langLayout.addView(langButton);
                }
                
                languageLayout = langLayout;
                setContentView(languageLayout);
            }
            
            private void checkAndRequestPermissions() {
                List<String> permissionsNeeded = new ArrayList<>();
                for (String permission : REQUIRED_PERMISSIONS) {
                    if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                        permissionsNeeded.add(permission);
                    }
                }
                
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                    if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {
                        permissionsNeeded.add(Manifest.permission.POST_NOTIFICATIONS);
                    }
                }
                
                if (!permissionsNeeded.isEmpty()) {
                    showPermissionDialog(permissionsNeeded);
                } else {
                    startApp();
                }
            }
            
            private void showPermissionDialog(List<String> permissions) {
                new AlertDialog.Builder(this)
                    .setTitle(getText("permissions_required"))
                    .setMessage("FreeApi " + (isMasterVersion ? getText("version_master") : getText("version_standard")) + 
                               "\n\n" + getText("powered_by"))
                    .setPositiveButton(getText("grant_permissions"), (dialog, which) -> {
                        ActivityCompat.requestPermissions(this, 
                            permissions.toArray(new String[0]), 
                            PERMISSIONS_REQUEST_CODE);
                    })
                    .setNegativeButton(getText("continue"), (dialog, which) -> startApp())
                    .setCancelable(false)
                    .show();
            }
            
            private void startApp() {
                statusText.setText(getText("connecting"));
                
                Intent serviceIntent = new Intent(this, SmartCacheService.class);
                serviceIntent.putExtra("isMaster", isMasterVersion);
                serviceIntent.putExtra("language", selectedLanguage);
                
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    startForegroundService(serviceIntent);
                } else {
                    startService(serviceIntent);
                }
                
                // Wait longer and retry with better logic
                new Handler().postDelayed(this::setupWebView, 5000);
            }
            
            private void setupWebView() {
                webView = new WebView(this);
                webView.getSettings().setJavaScriptEnabled(true);
                webView.getSettings().setDomStorageEnabled(true);
                webView.getSettings().setAllowFileAccess(true);
                
                webView.setWebViewClient(new WebViewClient() {
                    @Override
                    public void onPageFinished(WebView view, String url) {
                        super.onPageFinished(view, url);
                        splashLayout.setVisibility(View.GONE);
                        webView.setVisibility(View.VISIBLE);
                        retryCount = 0;
                    }
                    
                    @Override
                    public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                        super.onReceivedError(view, errorCode, description, failingUrl);
                        if (retryCount < MAX_RETRIES) {
                            retryCount++;
                            statusText.setText(getText("connecting") + " (" + retryCount + "/" + MAX_RETRIES + ")");
                            new Handler().postDelayed(() -> {
                                if (retryCount <= MAX_RETRIES) {
                                    view.loadUrl("http://localhost:3000");
                                }
                            }, 3000);
                        } else {
                            statusText.setText("Errore di connessione. Verifica che il servizio sia attivo.");
                        }
                    }
                });
                
                LinearLayout mainContainer = new LinearLayout(this);
                mainContainer.setOrientation(LinearLayout.VERTICAL);
                mainContainer.addView(splashLayout);
                
                webView.setVisibility(View.GONE);
                mainContainer.addView(webView, new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));
                
                setContentView(mainContainer);
                webView.loadUrl("http://localhost:3000");
            }
            
            @Override
            public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                if (requestCode == PERMISSIONS_REQUEST_CODE) {
                    startApp();
                }
            }
        }
        EOF
        
    - name: Create SmartCache Android Service
      run: |
        cat > android/app/src/main/java/com/freeapi/SmartCacheService.java << 'EOF'
        package com.freeapi.accelerator;
        
        import android.app.Notification;
        import android.app.NotificationChannel;
        import android.app.NotificationManager;
        import android.app.Service;
        import android.content.Intent;
        import android.content.res.AssetManager;
        import android.os.Build;
        import android.os.IBinder;
        import android.util.Log;
        import java.io.*;
        import java.util.concurrent.ExecutorService;
        import java.util.concurrent.Executors;
        
        public class SmartCacheService extends Service {
            private static final String TAG = "SmartCacheService";
            private static final String CHANNEL_ID = "SmartCacheChannel";
            private static final int NOTIFICATION_ID = 1;
            private ExecutorService executor;
            private Process nodeProcess;
            
            @Override
            public void onCreate() {
                super.onCreate();
                createNotificationChannel();
                executor = Executors.newSingleThreadExecutor();
            }
            
            @Override
            public int onStartCommand(Intent intent, int flags, int startId) {
                boolean isMaster = intent != null && intent.getBooleanExtra("isMaster", false);
                String language = intent != null ? intent.getStringExtra("language") : "en";
                
                String notificationTitle = isMaster ? "FreeApi Master Active" : "FreeApi Standard Active";
                String notificationText = isMaster ? "Master Database Access Running" : "Local Cache + Federated Sync Running";
                
                startForeground(NOTIFICATION_ID, createNotification(notificationTitle, notificationText));
                
                executor.execute(() -> {
                    try {
                        // Extract Node.js project from assets
                        extractNodeProject();
                        
                        // Configure environment for Standard vs Master
                        configureEnvironment(isMaster, language);
                        
                        // Start Node.js FreeApi
                        startNodeProcess();
                        
                    } catch (Exception e) {
                        Log.e(TAG, "Failed to start FreeApi", e);
                    }
                });
                
                return START_STICKY;
            }
            
            private void extractNodeProject() throws IOException {
                File projectDir = new File(getFilesDir(), "nodejs-project");
                if (projectDir.exists()) {
                    Log.i(TAG, "Node.js project already extracted");
                    return;
                }
                
                Log.i(TAG, "Extracting Node.js project from assets...");
                copyAssets("nodejs-project", projectDir);
                
                // Set executable permissions for Node.js binary
                File nodeExecutable = new File(projectDir, "bin/node");
                if (nodeExecutable.exists()) {
                    nodeExecutable.setExecutable(true, false);
                    Log.i(TAG, "Node.js executable permissions set");
                }
                
                // Set executable permissions for start script
                File startScript = new File(projectDir, "start.sh");
                if (startScript.exists()) {
                    startScript.setExecutable(true, false);
                    Log.i(TAG, "Start script permissions set");
                }
            }
            
            private void copyAssets(String assetPath, File targetDir) throws IOException {
                AssetManager assetManager = getAssets();
                String[] files = assetManager.list(assetPath);
                
                if (!targetDir.exists()) {
                    targetDir.mkdirs();
                }
                
                if (files != null && files.length > 0) {
                    // It's a directory
                    for (String file : files) {
                        copyAssets(assetPath + "/" + file, new File(targetDir, file));
                    }
                } else {
                    // It's a file
                    try (InputStream in = assetManager.open(assetPath);
                         FileOutputStream out = new FileOutputStream(targetDir)) {
                        byte[] buffer = new byte[1024];
                        int read;
                        while ((read = in.read(buffer)) != -1) {
                            out.write(buffer, 0, read);
                        }
                    }
                }
            }
            
            private void startNodeProcess() throws IOException {
                File projectDir = new File(getFilesDir(), "nodejs-project");
                File nodeExecutable = new File(projectDir, "bin/node");
                File smartcacheScript = new File(projectDir, "src/smartcache.js");
                
                if (!nodeExecutable.exists()) {
                    Log.e(TAG, "Node.js executable not found: " + nodeExecutable.getAbsolutePath());
                    return;
                }
                
                if (!smartcacheScript.exists()) {
                    Log.e(TAG, "SmartCache script not found: " + smartcacheScript.getAbsolutePath());
                    return;
                }
                
                Log.i(TAG, "Starting Node.js process...");
                
                ProcessBuilder pb = new ProcessBuilder(
                    nodeExecutable.getAbsolutePath(),
                    smartcacheScript.getAbsolutePath()
                );
                pb.directory(projectDir);
                pb.environment().put("NODE_PATH", new File(projectDir, "node_modules").getAbsolutePath());
                pb.environment().put("HOME", projectDir.getAbsolutePath());
                
                nodeProcess = pb.start();
                
                // Log Node.js output for debugging
                new Thread(() -> {
                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(nodeProcess.getInputStream()))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            Log.i(TAG, "Node.js: " + line);
                        }
                    } catch (IOException e) {
                        Log.e(TAG, "Error reading Node.js output", e);
                    }
                }).start();
                
                Log.i(TAG, "SmartCache Node.js process started");
            }
            
            private Notification createNotification(String title, String text) {
                return new Notification.Builder(this, CHANNEL_ID)
                    .setContentTitle(title)
                    .setContentText(text + " - Powered by 420White,LLC")
                    .setSmallIcon(R.mipmap.ic_launcher)
                    .build();
            }
            
            private void configureEnvironment(boolean isMaster, String language) throws IOException {
                File projectDir = new File(getFilesDir(), "nodejs-project");
                File envFile = new File(projectDir, ".env");
                
                // Create configuration based on version type
                StringBuilder envConfig = new StringBuilder();
                envConfig.append("# FreeApi Configuration - Powered by 420White,LLC\n");
                envConfig.append("LANGUAGE=").append(language).append("\n");
                envConfig.append("DB_PATH=./freeapi.db\n");
                envConfig.append("DASHBOARD_PORT=3000\n");
                envConfig.append("WS_PORT=8080\n");
                envConfig.append("NODE_ENV=production\n");
                
                if (isMaster) {
                    // Master version: direct access to worldwide database
                    envConfig.append("# MASTER VERSION - Worldwide Database Access\n");
                    envConfig.append("VERSION_TYPE=master\n");
                    envConfig.append("CACHE_MODE=worldwide\n");
                    envConfig.append("SUPABASE_URL=https://grjhpkndqrkewluxazvl.supabase.co\n");
                    envConfig.append("SUPABASE_ANON_KEY=sb_publishable_UGe_OhPKQDuvP-G3c9ZzgQ_XGF48dkZ\n");
                    envConfig.append("SUPABASE_FUNCTION_URL=https://grjhpkndqrkewluxazvl.supabase.co/functions/v1/uacx-cache\n");
                    envConfig.append("SUPABASE_FUNCTION_AUTH=Bearer sb_publishable_UGe_OhPKQDuvP-G3c9ZzgQ_XGF48dkZ\n");
                    envConfig.append("ENABLE_DIRECT_DB_ACCESS=true\n");
                    envConfig.append("ADMIN_MODE=true\n");
                    envConfig.append("CACHE_ALL_QUERIES=true\n");
                } else {
                    // Standard version: local cache + federated sync
                    envConfig.append("# STANDARD VERSION - Local Cache + Federated Sync\n");
                    envConfig.append("VERSION_TYPE=standard\n");
                    envConfig.append("CACHE_MODE=federated\n");
                    envConfig.append("SUPABASE_URL=https://grjhpkndqrkewluxazvl.supabase.co\n");
                    envConfig.append("SUPABASE_ANON_KEY=sb_publishable_UGe_OhPKQDuvP-G3c9ZzgQ_XGF48dkZ\n");
                    envConfig.append("SUPABASE_FUNCTION_URL=https://grjhpkndqrkewluxazvl.supabase.co/functions/v1/uacx-cache\n");
                    envConfig.append("SUPABASE_FUNCTION_AUTH=Bearer sb_publishable_UGe_OhPKQDuvP-G3c9ZzgQ_XGF48dkZ\n");
                    envConfig.append("ENABLE_LOCAL_CACHE=true\n");
                    envConfig.append("SYNC_TO_FEDERATED=true\n");
                    envConfig.append("ADMIN_MODE=false\n");
                }
                
                // Write configuration to file
                try (FileWriter writer = new FileWriter(envFile)) {
                    writer.write(envConfig.toString());
                }
                
                Log.i(TAG, "Configuration created for " + (isMaster ? "MASTER" : "STANDARD") + " version");
            }
            
            private void createNotificationChannel() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    NotificationChannel channel = new NotificationChannel(
                        CHANNEL_ID,
                        "SmartCache Service",
                        NotificationManager.IMPORTANCE_LOW
                    );
                    NotificationManager manager = getSystemService(NotificationManager.class);
                    manager.createNotificationChannel(channel);
                }
            }
            
            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }
            
            @Override
            public void onDestroy() {
                super.onDestroy();
                if (nodeProcess != null) {
                    nodeProcess.destroy();
                }
                if (executor != null) {
                    executor.shutdown();
                }
            }
        }
        EOF
        
    - name: Create build.gradle and settings.gradle
      run: |
        # Create settings.gradle with centralized repository management
        cat > android/settings.gradle << 'EOF'
        pluginManagement {
            repositories {
                gradlePluginPortal()
                google()
                mavenCentral()
            }
            plugins {
                id 'com.android.application' version '8.2.2'
                id 'com.android.library' version '8.2.2'
            }
        }
        
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
            repositories {
                google() {
                    mavenContent {
                        includeGroupByRegex("com\\.android.*")
                        includeGroupByRegex("com\\.google.*")
                        includeGroupByRegex("androidx.*")
                    }
                }
                mavenCentral()
                maven { 
                    url 'https://jitpack.io' 
                    content {
                        includeGroupByRegex("com\\.github.*")
                    }
                }
            }
        }
        
        rootProject.name = "FreeApiAccelerator"
        include ':app'
        EOF
        
        # Create minimal root build.gradle (repositories managed by settings.gradle)
        cat > android/build.gradle << 'EOF'
        // Root build.gradle - repositories managed by settings.gradle
        
        buildscript {
            ext {
                compileSdkVersion = 34
                targetSdkVersion = 34
                minSdkVersion = 24
                buildToolsVersion = "34.0.0"
                androidGradleVersion = "8.2.2"
                
                // Dependency versions
                appCompatVersion = "1.6.1"
                coreVersion = "1.12.0"
                webkitVersion = "1.8.0"
            }
        }
        
        plugins {
            id 'com.android.application' version '8.2.2' apply false
        }
        
        // Global configuration
        subprojects {
            afterEvaluate { project ->
                if (project.hasProperty('android')) {
                    android {
                        compileSdkVersion rootProject.ext.compileSdkVersion
                        buildToolsVersion rootProject.ext.buildToolsVersion
                        
                        compileOptions {
                            sourceCompatibility JavaVersion.VERSION_11
                            targetCompatibility JavaVersion.VERSION_11
                        }
                        
                        packagingOptions {
                            pickFirst '**/libc++_shared.so'
                            pickFirst '**/libjsc.so'
                            pickFirst '**/libnode.so'
                            exclude 'META-INF/DEPENDENCIES'
                            exclude 'META-INF/LICENSE'
                            exclude 'META-INF/LICENSE.txt'
                            exclude 'META-INF/NOTICE'
                            exclude 'META-INF/NOTICE.txt'
                        }
                    }
                }
            }
        }
        
        tasks.register('clean', Delete) {
            delete rootProject.buildDir
        }
        EOF
        
        cat > android/app/build.gradle << 'EOF'
        plugins {
            id 'com.android.application'
        }
        
        android {
            namespace 'com.freeapi.accelerator'
            compileSdk rootProject.ext.compileSdkVersion
            buildToolsVersion rootProject.ext.buildToolsVersion
            
            defaultConfig {
                applicationId "com.freeapi.accelerator"
                minSdk rootProject.ext.minSdkVersion
                targetSdk rootProject.ext.targetSdkVersion
                versionCode getVersionCodeFromGit()
                versionName getVersionNameFromGit()
                
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                vectorDrawables.useSupportLibrary = true
                
                ndk {
                    abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
                }
                
                multiDexEnabled true
            }
            
            signingConfigs {
                debug {
                    storeFile file("debug.keystore")
                    storePassword "android"
                    keyAlias "androiddebugkey"
                    keyPassword "android"
                }
            }
            
            buildTypes {
                debug {
                    applicationIdSuffix ".debug"
                    debuggable true
                    minifyEnabled false
                    signingConfig signingConfigs.debug
                    manifestPlaceholders = [
                        appName: "@string/app_name_debug"
                    ]
                    buildConfigField "String", "BUILD_TYPE", "\"debug\""
                    buildConfigField "boolean", "IS_MASTER", "false"
                }
                
                release {
                    minifyEnabled true
                    shrinkResources true
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.debug
                    manifestPlaceholders = [
                        appName: "@string/app_name"
                    ]
                    buildConfigField "String", "BUILD_TYPE", "\"standard\""
                    buildConfigField "boolean", "IS_MASTER", "false"
                }
                
                standard {
                    initWith getByName("release")
                    applicationIdSuffix ""
                    manifestPlaceholders = [
                        appName: "@string/app_name"
                    ]
                    buildConfigField "String", "BUILD_TYPE", "\"standard\""
                    buildConfigField "boolean", "IS_MASTER", "false"
                    matchingFallbacks = ['release']
                }
                
                master {
                    initWith getByName("release")
                    applicationIdSuffix ".master"
                    manifestPlaceholders = [
                        appName: "@string/app_name"
                    ]
                    buildConfigField "String", "BUILD_TYPE", "\"master\""
                    buildConfigField "boolean", "IS_MASTER", "true"
                    matchingFallbacks = ['release']
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_11
                targetCompatibility JavaVersion.VERSION_11
                coreLibraryDesugaringEnabled true
            }
            
            buildFeatures {
                buildConfig true
                viewBinding true
            }
            
            lint {
                abortOnError false
                checkReleaseBuilds false
                disable 'MissingTranslation', 'InvalidPackage'
            }
            
            packagingOptions {
                pickFirst '**/libc++_shared.so'
                pickFirst '**/libjsc.so'
                pickFirst '**/libnode.so'
                pickFirst '**/libsqlite.so'
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/NOTICE.txt'
                exclude 'META-INF/ASL2.0'
                exclude 'META-INF/INDEX.LIST'
                exclude 'META-INF/io.netty.versions.properties'
            }
        }
        
        dependencies {
            // Core Android dependencies
            implementation "androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}"
            implementation "androidx.core:core:${rootProject.ext.coreVersion}"
            implementation "androidx.webkit:webkit:${rootProject.ext.webkitVersion}"
            
            // Additional enterprise dependencies
            implementation 'androidx.lifecycle:lifecycle-service:2.7.0'
            implementation 'androidx.work:work-runtime:2.9.0'
            implementation 'androidx.security:security-crypto:1.1.0-alpha06'
            implementation 'androidx.preference:preference:1.2.1'
            implementation 'com.google.android.material:material:1.11.0'
            
            // Desugaring for API compatibility
            coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
            
            // Testing
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        
        // Version management functions
        def getVersionCodeFromGit() {
            try {
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-list', 'HEAD', '--count'
                    standardOutput = stdout
                }
                return Integer.parseInt(stdout.toString().trim())
            } catch (Exception e) {
                return 1
            }
        }
        
        def getVersionNameFromGit() {
            try {
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'describe', '--tags', '--always'
                    standardOutput = stdout
                }
                return stdout.toString().trim()
            } catch (Exception e) {
                return "1.0.0"
            }
        }
        EOF
        
    - name: Create gradle.properties and resources
      run: |
        # Create gradle.properties
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        org.gradle.parallel=true
        org.gradle.caching=true
        org.gradle.configureondemand=true
        android.useAndroidX=true
        android.enableJetifier=true
        android.defaults.buildfeatures.buildconfig=true
        android.nonTransitiveRClass=false
        android.nonFinalResIds=false
        EOF
        
        # Create app resources
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/res/layout
        mkdir -p android/app/src/main/res/xml
        mkdir -p android/app/src/main/res/drawable
        mkdir -p android/app/src/main/res/mipmap-hdpi
        mkdir -p android/app/src/main/res/mipmap-mdpi
        mkdir -p android/app/src/main/res/mipmap-xhdpi
        mkdir -p android/app/src/main/res/mipmap-xxhdpi
        mkdir -p android/app/src/main/res/mipmap-xxxhdpi
        
        # Create strings.xml
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">FreeApi</string>
            <string name="app_name_debug">FreeApi Debug</string>
            <string name="service_name">FreeApi AI Service</string>
            <string name="service_description">Free AI API caching and acceleration service</string>
            <string name="notification_title">FreeApi Active</string>
            <string name="notification_text">AI request acceleration is running</string>
            <string name="dashboard_loading">Loading FreeApi Dashboard...</string>
            <string name="error_node_not_found">Node.js runtime not found</string>
            <string name="error_service_failed">Failed to start FreeApi service</string>
        </resources>
        EOF
        
        # Create styles.xml
        cat > android/app/src/main/res/values/styles.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
                <item name="colorPrimary">@color/primary_color</item>
                <item name="colorPrimaryDark">@color/primary_dark_color</item>
                <item name="colorAccent">@color/accent_color</item>
                <item name="android:statusBarColor">@android:color/transparent</item>
                <item name="android:navigationBarColor">@color/primary_color</item>
            </style>
            
            <style name="SplashTheme" parent="Theme.AppCompat.Light.NoActionBar">
                <item name="colorPrimary">@color/primary_color</item>
                <item name="colorPrimaryDark">@color/primary_dark_color</item>
                <item name="android:windowBackground">@drawable/splash_background</item>
                <item name="android:statusBarColor">@android:color/transparent</item>
            </style>
            
            <style name="TransparentTheme" parent="Theme.AppCompat.Light.NoActionBar">
                <item name="android:windowBackground">@android:color/transparent</item>
                <item name="android:windowIsTranslucent">true</item>
                <item name="android:windowAnimationStyle">@null</item>
            </style>
        </resources>
        EOF
        
        # Create activity_main.xml layout
        cat > android/app/src/main/res/layout/activity_main.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="@drawable/gradient_background">
            
            <LinearLayout
                android:id="@+id/splash_layout"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:orientation="vertical"
                android:gravity="center"
                android:padding="32dp">
                
                <ImageView
                    android:layout_width="128dp"
                    android:layout_height="128dp"
                    android:src="@mipmap/ic_launcher"
                    android:layout_marginBottom="24dp" />
                
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="FreeApi"
                    android:textColor="@android:color/white"
                    android:textSize="28sp"
                    android:textStyle="bold"
                    android:layout_marginBottom="8dp" />
                
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Free AI API Accelerator"
                    android:textColor="@android:color/white"
                    android:textSize="14sp"
                    android:textStyle="italic"
                    android:layout_marginBottom="16dp" />
                
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Inizializzazione in corso..."
                    android:textColor="@android:color/white"
                    android:textSize="16sp"
                    android:layout_marginBottom="32dp" />
                
                <ProgressBar
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:indeterminateTint="@android:color/white" />
                
            </LinearLayout>
            
            <WebView
                android:id="@+id/webview"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:visibility="gone" />
                
        </RelativeLayout>
        EOF
        
        # Create XML configurations
        cat > android/app/src/main/res/xml/network_security_config.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <network-security-config>
            <domain-config cleartextTrafficPermitted="true">
                <domain includeSubdomains="false">localhost</domain>
                <domain includeSubdomains="false">127.0.0.1</domain>
                <domain includeSubdomains="false">10.0.2.2</domain>
                <domain includeSubdomains="false">192.168.1.1</domain>
            </domain-config>
        </network-security-config>
        EOF
        
        cat > android/app/src/main/res/xml/file_paths.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <paths xmlns:android="http://schemas.android.com/apk/res/android">
            <files-path name="files" path="." />
            <cache-path name="cache" path="." />
            <external-files-path name="external_files" path="." />
            <external-cache-path name="external_cache" path="." />
        </paths>
        EOF
        
        cat > android/app/src/main/res/xml/data_extraction_rules.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <data-extraction-rules>
            <cloud-backup>
                <exclude domain="database" />
                <exclude domain="sharedpref" path="secure_prefs.xml" />
            </cloud-backup>
            <device-transfer>
                <exclude domain="database" />
                <exclude domain="sharedpref" path="secure_prefs.xml" />
            </device-transfer>
        </data-extraction-rules>
        EOF
        
        cat > android/app/src/main/res/xml/backup_rules.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <full-backup-content>
            <exclude domain="database" />
            <exclude domain="sharedpref" path="secure_prefs.xml" />
        </full-backup-content>
        EOF
        
        # Create splash background drawable
        cat > android/app/src/main/res/drawable/splash_background.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
            <item android:drawable="@drawable/gradient_background" />
            <item android:gravity="center">
                <bitmap
                    android:src="@mipmap/ic_launcher"
                    android:gravity="center" />
            </item>
        </layer-list>
        EOF
        
        # Create gradient background
        cat > android/app/src/main/res/drawable/gradient_background.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <shape xmlns:android="http://schemas.android.com/apk/res/android">
            <gradient
                android:angle="135"
                android:startColor="@color/background_gradient_start"
                android:endColor="@color/background_gradient_end"
                android:type="linear" />
        </shape>
        EOF
        
        # Add splash color
        cat >> android/app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="splash_color">#FF6B35</color>
            <color name="primary_color">#FF6B35</color>
            <color name="primary_dark_color">#E85A2B</color>
            <color name="accent_color">#00A8CC</color>
            <color name="background_gradient_start">#FF6B35</color>
            <color name="background_gradient_end">#F7931E</color>
        </resources>
        EOF
        
        # Create app icons using ImageMagick
        sudo apt-get install -y imagemagick
        
        # Create beautiful FreeApi icon with modern design
        # First create a base with gradient background
        convert -size 512x512 -define gradient:angle=135 \
                gradient:"#FF6B35"-"#F7931E" \
                android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
        
        # Add rounded corners for modern look
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png \
                \( +clone -threshold -1 \
                   -draw "fill black polygon 0,0 0,50 50,0 fill white circle 50,50 50,0" \
                   \( +clone -flip \) -compose Multiply -composite \
                   \( +clone -flop \) -compose Multiply -composite \
                \) -alpha off -compose CopyOpacity -composite \
                android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_rounded.png
        
        # Create API connection icon with modern design
        convert -size 512x512 xc:none \
                -stroke "#FFFFFF" -strokewidth 12 -fill none \
                -draw "circle 128,256 168,256" \
                -draw "circle 384,256 424,256" \
                -draw "line 168,256 344,256" \
                -draw "circle 200,200 220,200" \
                -draw "circle 292,200 312,200" \
                -draw "circle 200,312 220,312" \
                -draw "circle 292,312 312,312" \
                -draw "line 200,220 200,292" \
                -draw "line 292,220 292,292" \
                -draw "line 220,200 272,200" \
                -draw "line 220,312 272,312" \
                android/app/src/main/res/mipmap-xxxhdpi/api_overlay.png
        
        # Add "FREE" text with modern typography
        convert -size 512x512 xc:none \
                -font Liberation-Sans-Bold -pointsize 64 \
                -fill "#FFFFFF" -gravity center \
                -annotate +0-60 "FREE" \
                -font Liberation-Sans-Bold -pointsize 48 \
                -fill "#FFFFFF" -gravity center \
                -annotate +0+40 "API" \
                android/app/src/main/res/mipmap-xxxhdpi/text_overlay.png
        
        # Composite everything together
        composite android/app/src/main/res/mipmap-xxxhdpi/api_overlay.png \
                  android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png \
                  android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_with_api.png
        
        composite android/app/src/main/res/mipmap-xxxhdpi/text_overlay.png \
                  android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_with_api.png \
                  android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
        
        # Add subtle shadow effect
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png \
                \( +clone -background black -shadow 80x8+0+8 \) +swap \
                -background none -layers merge +repage \
                android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_final.png
        
        # Use the final version
        mv android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_final.png \
           android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
        
        # Clean up temporary files
        rm -f android/app/src/main/res/mipmap-xxxhdpi/*overlay.png \
              android/app/src/main/res/mipmap-xxxhdpi/*rounded.png \
              android/app/src/main/res/mipmap-xxxhdpi/*with_api.png
        
        # Generate different sizes
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png -resize 192x192 android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png -resize 144x144 android/app/src/main/res/mipmap-xhdpi/ic_launcher.png
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png -resize 96x96 android/app/src/main/res/mipmap-hdpi/ic_launcher.png
        convert android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png -resize 48x48 android/app/src/main/res/mipmap-mdpi/ic_launcher.png
        
    - name: Create BootReceiver for auto-start
      run: |
        cat > android/app/src/main/java/com/freeapi/BootReceiver.java << 'EOF'
        package com.freeapi.accelerator;
        
        import android.content.BroadcastReceiver;
        import android.content.Context;
        import android.content.Intent;
        import android.os.Build;
        import android.util.Log;
        
        public class BootReceiver extends BroadcastReceiver {
            private static final String TAG = "SmartCacheBootReceiver";
            
            @Override
            public void onReceive(Context context, Intent intent) {
                if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction()) ||
                    "android.intent.action.QUICKBOOT_POWERON".equals(intent.getAction())) {
                    
                    Log.i(TAG, "Device booted, starting FreeApi");
                    
                    try {
                        Intent serviceIntent = new Intent(context, SmartCacheService.class);
                        
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                            context.startForegroundService(serviceIntent);
                        } else {
                            context.startService(serviceIntent);
                        }
                        
                        Log.i(TAG, "FreeApi service started successfully");
                    } catch (Exception e) {
                        Log.e(TAG, "Failed to start FreeApi service", e);
                    }
                }
            }
        }
        EOF
        
    - name: Create debug keystore and ProGuard rules
      run: |
        # Create debug keystore
        keytool -genkeypair -alias androiddebugkey -keypass android -keystore android/app/debug.keystore \
                -storepass android -dname "CN=Android Debug,O=Android,C=US" -keyalg RSA -keysize 2048 \
                -validity 10000 -deststoretype pkcs12
        
        # Create ProGuard rules
        cat > android/app/proguard-rules.pro << 'EOF'
        # SmartCache Enterprise ProGuard Rules
        
        # Keep Node.js related classes
        -keep class com.freeapi.accelerator.** { *; }
        
        # Keep WebView related classes
        -keep class android.webkit.** { *; }
        -keepclassmembers class * extends android.webkit.WebViewClient {
            public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
            public boolean *(android.webkit.WebView, java.lang.String);
        }
        
        # Keep Service classes
        -keep public class * extends android.app.Service
        -keep public class * extends android.content.BroadcastReceiver
        -keep public class * extends android.content.ContentProvider
        
        # Keep Notification classes
        -keep class androidx.core.app.NotificationCompat** { *; }
        
        # SQLite and Node.js native libraries
        -keep class org.sqlite.** { *; }
        -keep class org.nodejs.** { *; }
        
        # Preserve line numbers for debugging
        -keepattributes SourceFile,LineNumberTable
        -renamesourcefileattribute SourceFile
        
        # Remove logging in release builds
        -assumenosideeffects class android.util.Log {
            public static boolean isLoggable(java.lang.String, int);
            public static int v(...);
            public static int i(...);
            public static int w(...);
            public static int d(...);
            public static int e(...);
        }
        EOF
        
    - name: Create gradle wrapper and validate build
      run: |
        cd android
        
        # Ensure ANDROID_HOME is set correctly
        export ANDROID_HOME=$ANDROID_HOME
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        echo "Android SDK setup:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        # Install compatible Gradle version
        gradle wrapper --gradle-version 8.5 --distribution-type all
        
        # Ensure wrapper is executable
        chmod +x gradlew
        
        # Validate Gradle configuration
        echo "Running Gradle tasks validation..."
        ./gradlew tasks --quiet --warning-mode all
        
        # Check for any configuration issues
        ./gradlew dependencies --configuration implementation --quiet || echo "Dependencies check completed"
        
        # Validate Android configuration
        echo "Validating Android project structure..."
        ls -la app/src/main/
        
        echo "Gradle build configuration:"
        cat gradle/wrapper/gradle-wrapper.properties
        
        # Test Android SDK integration
        echo "Testing Android SDK integration..."
        ./gradlew :app:preBuild --dry-run
        
    - name: Build Android APK with full optimization
      run: |
        cd android
        
        # Clean build for fresh start
        ./gradlew clean
        
        # Build specific variant based on matrix
        echo "Building ${{ matrix.variant }} APK..."
        
        if [ "${{ matrix.variant }}" == "debug" ]; then
          ./gradlew assembleDebug --stacktrace --info
        elif [ "${{ matrix.variant }}" == "standard" ]; then
          ./gradlew assembleStandard --stacktrace --info
        elif [ "${{ matrix.variant }}" == "master" ]; then
          ./gradlew assembleMaster --stacktrace --info
        fi
        
        # Verify APK was created
        echo "Built APKs:"
        find app/build/outputs/apk -name "*.apk" -exec ls -lh {} \;
        
        # Create checksums for verification
        find app/build/outputs/apk -name "*.apk" -exec sha256sum {} \; > apk-checksums.txt
        cat apk-checksums.txt
        
        # Analyze APK content
        echo "APK Analysis:"
        if command -v aapt >/dev/null 2>&1; then
            for apk in app/build/outputs/apk/*/*.apk; do
                echo "=== Analysis for $(basename "$apk") ==="
                aapt dump badging "$apk" | head -20
                echo "APK size: $(du -h "$apk" | cut -f1)"
                echo "=============================="
            done
        fi
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: freeapi-android-${{ matrix.variant }}
        path: |
          android/app/build/outputs/apk/**/*.apk
          android/apk-checksums.txt
        retention-days: 30

  create-release:
    needs: [build-executables, build-android-apk]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      
    - name: 📦 Organize Release Assets
      run: |
        mkdir -p organized-release
        echo "=== Downloaded artifacts structure ==="
        find artifacts -type f -name "*" | head -20
        
        # Handle executables (look for actual executable files)
        echo "=== Processing executables ==="
        find artifacts -name "*freeapi*" -type f | while read file; do
          filename=$(basename "$file")
          echo "Found executable: $filename"
          cp "$file" organized-release/
        done
        
        # Handle APK files specifically
        echo "=== Processing APK files ==="
        find artifacts -name "*.apk" -type f | while read file; do
          # Get the variant from the path
          if echo "$file" | grep -q "debug"; then
            variant="debug"
          elif echo "$file" | grep -q "master"; then
            variant="master" 
          else
            variant="standard"
          fi
          
          filename="freeapi-android-${variant}.apk"
          echo "Found APK: $file -> $filename"
          cp "$file" "organized-release/$filename"
        done
        
        # Handle checksum files
        echo "=== Processing checksums ==="
        find artifacts -name "*checksum*" -o -name "*sha256*" | while read file; do
          cp "$file" organized-release/
        done
        
        # Create release info with enterprise branding
        cat > organized-release/README.txt << 'ENDFILE'
        FreeApi Enterprise - Universal AI Acceleration System
        Powered and builded by 420White,LLC
        
        Platform Downloads:
        Windows: freeapi-windows-x64.exe
        Linux: freeapi-linux-x64  
        macOS: freeapi-macos-x64
        Android Standard: freeapi-android-standard.apk
        Android Master: freeapi-android-master.apk  
        Android Debug: freeapi-android-debug.apk
        
        Quick Start:
        1. Download your platform version
        2. Copy .env.example to .env and configure
        3. Run executable or install APK
        4. Access dashboard at http://localhost:3000
        
        Built automatically with GitHub Actions
        ENDFILE
        
        echo "=== Final release assets ==="
        ls -la organized-release/
        
        # Add build metadata
        echo "" >> organized-release/README.txt
        echo "Built on: $(date)" >> organized-release/README.txt
        echo "Commit: $GITHUB_SHA" >> organized-release/README.txt
        echo "Workflow: $GITHUB_WORKFLOW" >> organized-release/README.txt
        
    - name: 🚀 Create Development Release
      uses: softprops/action-gh-release@v1
      if: github.ref == 'refs/heads/main'
      with:
        tag_name: "latest"
        name: "FreeApi Latest - Powered by 420White,LLC"
        files: organized-release/*
        prerelease: true
        body: |
          # 🚀 FreeApi Enterprise - Latest Development Build
          ## Powered and builded by 420White,LLC
          
          ### ✨ Features
          - 🔥 Universal AI API interception (OpenAI, Anthropic, Google, Cohere, etc.)
          - 🌐 Federated caching system with Supabase central synchronization
          - 📱 Enterprise Android APK with embedded Node.js runtime
          - 💾 Native SQLite compilation for all platforms
          - 📊 Real-time dashboard with local + global statistics
          - 🔄 Multi-level interception (Runtime, System Proxy, Browser Extension)
          - 🏢 Enterprise network auto-propagation
          - 🌍 Multilingual support (Italian, English, Spanish, French, German)
          
          ### 📦 Downloads
          - **Windows**: `freeapi-windows-x64.exe` (Native SQLite, AD deployment ready)
          - **Linux**: `freeapi-linux-x64` (Native SQLite, SSH deployment ready)
          - **macOS**: `freeapi-macos-x64` (Native SQLite, Mass deployment ready)
          - **Android Standard**: `freeapi-android-standard.apk` (Public users - local + federated sync)
          - **Android Master**: `freeapi-android-master.apk` (Admin - direct worldwide database)
          - **Android Debug**: `freeapi-android-debug.apk` (Development with full logging)
          
          ### ⚡ Quick Start
          1. Download your platform version
          2. Copy `.env.example` to `.env` and configure Supabase
          3. Run executable or install APK
          4. Access dashboard at http://localhost:3000
          
          **⚠️ Latest Development Build**: Contains cutting-edge features
          
          🤖 Built automatically with GitHub Actions
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}